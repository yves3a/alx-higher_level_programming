"""
Represents class BaseGeometry
"""


class BaseGeometry:
    """
    A class that raises an exception
    """

    def area(self):
        """
        Define a method area

        Raises:
            Exception: if area is not implemented

        >>> bg = BaseGeometry()
        >>> bg.area()
        Traceback (most recent call last):
        ...
        Exception: area() is not implemented
        """
        raise Exception("area() is not implemented")

    def integer_validator(self, name, value):
        """
        Define integer_validator

        Args:
            name (str): The name
            value (int): The integer to be validated.

        Raises:
            TypeError: If value is not an integer.
            ValueError: If value is <= 0.

        Examples:
        >>> bg = BaseGeometry()
        >>> bg.integer_validator("age", 10)

        >>> bg.integer_validator("age", 0)
        Traceback (most recent call last):
        ...
        ValueError: age must be greater than 0

        >>> bg.integer_validator("age", -4)
        Traceback (most recent call last):
        ...
        ValueError: age must be greater than 0

        >>> bg.integer_validator("age", "4")
        Traceback (most recent call last):
        ...
        TypeError: age must be an integer

        >>> bg.integer_validator("age", (4,))
        Traceback (most recent call last):
        ...
        TypeError: age must be an integer

        >>> bg.integer_validator("age", [3])
        Traceback (most recent call last):
        ...
        TypeError: age must be an integer

        >>> bg.integer_validator("age", True)
        Traceback (most recent call last):
        ...
        TypeError: age must be an integer

        >>> bg.integer_validator("age", {3, 4})
        Traceback (most recent call last):
        ...
        TypeError: age must be an integer

        >>> bg.integer_validator("age", None)
        Traceback (most recent call last):
        ...
        TypeError: age must be an integer
        """
        if type(value) != int:
            raise TypeError(f"{name} must be an integer")
        if value <= 0:
            raise ValueError(f"{name} must be greater than 0")
