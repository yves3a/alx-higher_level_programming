>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test normal division with integers
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Original matrix should remain unchanged
>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]

# Test with floating point numbers
>>> matrix = [[1.1, 2.2, 3.3], [4.4, 5.5, 6.6]]
>>> print(matrix_divided(matrix, 2))
[[0.55, 1.1, 1.65], [2.2, 2.75, 3.3]]

# Test division by negative number
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, -3))
[[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]

# Test division by float
>>> print(matrix_divided(matrix, 2.5))
[[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

# Test error cases:

# Test division by zero
>>> try:
...     print(matrix_divided(matrix, 0))
... except ZeroDivisionError as e:
...     print(e)
division by zero

# Test division by non-number
>>> try:
...     print(matrix_divided(matrix, "string"))
... except TypeError as e:
...     print(e)
div must be a number

# Test matrix with rows of different sizes
>>> matrix = [[1, 2, 3], [4, 5]]
>>> try:
...     print(matrix_divided(matrix, 3))
... except TypeError as e:
...     print(e)
Each row of the matrix must have the same size

# Test non-list matrix
>>> try:
...     print(matrix_divided("not a matrix", 3))
... except TypeError as e:
...     print(e)
matrix must be a matrix (list of lists) of integers/floats

# Test matrix with non-number elements
>>> matrix = [[1, "string", 3], [4, 5, 6]]
>>> try:
...     print(matrix_divided(matrix, 3))
... except TypeError as e:
...     print(e)
matrix must be a matrix (list of lists) of integers/floats

# Test empty matrix
>>> try:
...     print(matrix_divided([], 3))
... except TypeError as e:
...     print(e)
matrix must be a matrix (list of lists) of integers/floats

# Test matrix with empty row
>>> try:
...     print(matrix_divided([[]], 3))
... except TypeError as e:
...     print(e)
matrix must be a matrix (list of lists) of integers/floats
