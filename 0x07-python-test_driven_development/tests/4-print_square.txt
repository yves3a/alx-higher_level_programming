"""
Module that prints a square
"""

print_square = __import__('4-print_square').print_square

The ``4-print_square`` module
============================

Using ``print_square``
---------------------

Import module:
    >>> print_square = __import__('4-print_square').print_square

Test normal square size:
    >>> print_square(4)
    ####
    ####
    ####
    ####

Test size zero:
    >>> print_square(0)

Test size one:
    >>> print_square(1)
    #

Test negative size:
    >>> print_square(-1)
    Traceback (most recent call last):
    ValueError: size must be >= 0

Test float:
    >>> print_square(2.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

Test negative float:
    >>> print_square(-2.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

Test string:
    >>> print_square("4")
    Traceback (most recent call last):
    TypeError: size must be an integer

Test none:
    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

Test inf:
    >>> print_square(float('inf'))
    Traceback (most recent call last):
    TypeError: size must be an integer

Test nan:
    >>> print_square(float('nan'))
    Traceback (most recent call last):
    TypeError: size must be an integer

Test missing arguments:
    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'

Test extra arguments:
    >>> print_square(1, 2)
    Traceback (most recent call last):
    TypeError: print_square() takes 1 positional argument but 2 were given

Test list:
    >>> print_square([1])
    Traceback (most recent call last):
    TypeError: size must be an integer
